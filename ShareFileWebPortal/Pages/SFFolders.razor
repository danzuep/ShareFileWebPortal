@page "/sf-folders"

<PageTitle>ShareFile User Folder Access</PageTitle>
@using System.Diagnostics
@using System.Linq.Dynamic.Core
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.StaticFiles
@using Common.Helpers
@using Common.Helpers.IO
@using ShareFileWebPortal.Data
@using ShareFileWebPortal.Data.ViewModels
@using ShareFileWebPortal.Services
@using global::Data.ShareFile
@using global::Data.ShareFile.Models
@using AutoMapper
@using ShareFile.Api.Helpers.Extensions
@using ShareFile.Api.Helpers.Models
@inject ShareFileApiService _sfService
@inject ShareFileRepository _db
@inject ILogger<SFFolders> _logger
@inject IMapper _mapper;
@inject IJSRuntime JS

<h4>ShareFile Folders</h4>

@if (VM == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @*<div>
        <label>
            <p><button @onclick="GetFoldersFromApi">Refresh folders from the API</button>
                Folder Depth: <input @bind="FolderRecursionLimit" @bind:event="oninput" @onkeydown="@EnterGetApiFolders" /> (-1 for unlimited recursion)</p>
            @if (IsUpdatingFoldersFromApi)
            {
                <p><button @onclick="Cancel">Stop the API call</button>
                    Updating folders from the API... This can take a LONG time</p>
            }
            <p>Folder to process: <input @bind="FolderToProcess" @bind:event="oninput" @onkeydown="@EnterGetApiFolders" /> (folder name or GUID)</p>
            <p>Folder to skip: <input @bind="FolderToSkip" @bind:event="oninput" @onkeydown="@EnterGetApiFolders" /> (folder name or GUID)</p>
        </label>
        <p>Showing @PageSkipStart to @PageSkipEnd of @SfDbItemCount folders loaded from the database.
            Page Number: <input @bind="PageNumber" @bind:event="oninput" @onkeydown="@EnterRefreshView" />
            Page Count: <input @bind="PageCount" @bind:event="oninput" @onkeydown="@EnterRefreshView" />
            <button class="btn btn-primary" @onclick="ExportToExcel" disabled=@isExporting>Export All</button>
        </p>
    </div>

    <br />

    <table class="table">
        <thead>
            <tr>
                <th>GUID</th>
                <th>Folder</th>
                <th>Items</th>
                <th>Size</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in VmFolders)
            {
                <tr>
                    <td>@item.Uid</td>
                    <td>@item.FullPath</td>
                    <td>@item.ItemCount</td>
                    <td>@item.FileSize</td>
                </tr>
            }
        </tbody>
    </table>*@
    
    @*<p>@TotalCount folders loaded from the database.
        <button @onclick="GetFromApi">Refresh folders from the ShareFile API</button>
    </p>*@
    <p>Displaying <input @bind="GridPageSize" @bind:event="oninput" @onkeydown="@EnterRefreshView" size="1"/> folders from <b>@CurrentPageStart.ToString("n0")</b> to <b>@CurrentPageEnd.ToString("n0")</b> of <b>@TotalCount.ToString("n0")</b>.
        @if (!isExporting)
        {
            <button class="btn btn-primary" @onclick="ExportView" disabled="@isExporting">Export View</button>
            <button class="btn btn-primary" @onclick="ExportAll" disabled="@isExporting">Export All</button>
        }
        else
        {
            <button class="btn btn-primary" @onclick="Cancel">Cancel Export</button>
        }
    </p>

    <RadzenDataGrid @ref=dataGrid Count="@TotalCount" Data="@VM" TItem="SfItemVM" IsLoading="@isLoading" LoadData="@OnPageChanged"
        AllowSorting="true" AllowColumnResize="true" AllowColumnReorder="true" AllowGrouping="true" Render="@OnRender"
        AllowFiltering="true" FilterMode="FilterMode.Simple" LogicalFilterOperator="LogicalFilterOperator.Or" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowPaging="true" PageSize="@PageSize" PagerPosition="PagerPosition.Bottom" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
        <GroupHeaderTemplate>
            @context.GroupDescriptor.GetTitle(): @(context.Data.Key ?? "") (@context.Data.Count)
        </GroupHeaderTemplate>
        <Columns>
            <RadzenDataGridColumn TItem="SfItemVM" Property="SemanticPath" Title="Folder Path" />
            <RadzenDataGridColumn TItem="SfItemVM" Property="Name" Title="Folder Name" />
            <RadzenDataGridColumn TItem="SfItemVM" Property="Uid" Title="GUID" Sortable="false" />
            <RadzenDataGridColumn TItem="SfItemVM" Property="ItemCount" Title="Items" Width="110px" FormatString="{0:n0}" />
            <RadzenDataGridColumn TItem="SfItemVM" Property="FileSize" Title="Size" Width="100px" />
        </Columns>
    </RadzenDataGrid>
}

@code {
    private const int DefaultPageSize = 100;
    private int GridPageSize { get; set; } = DefaultPageSize;
    private int PageSize = DefaultPageSize;
    private int PageCount => TotalCount >= PageSize && IsNotLastPage ? PageSize : CurrentPageCount;
    protected IEnumerable<SfItemVM>? VM;
    private RadzenDataGrid<SfItemVM>? dataGrid;
    private bool isLoading = false;
    private int TotalCount;
    private int FilteredCount;
    private bool IsNotLastPage => CurrentPageIndex < (TotalCount / PageSize);
    private int CurrentPageCount => dataGrid?.PagedView?.Count() ?? 0;
    private int CurrentPageIndex => dataGrid?.CurrentPage ?? 0;
    private int CurrentPageNumber => CurrentPageIndex + 1;
    private int CurrentPageStartIndex => CurrentPageIndex * PageSize;
    private int CurrentPageStart => TotalCount > 0 ? CurrentPageStartIndex + 1 : 0;
    private int CurrentPageFinish => TotalCount > 0 ? CurrentPageNumber * PageSize : 0;
    private int CurrentPageEnd => TotalCount > CurrentPageFinish ? CurrentPageFinish : TotalCount;
    private CancellationTokenSource _cts = new CancellationTokenSource();
    private IQueryable<SfItem>? _dbQuery;
    private bool isExporting = false;
    private string ExportName = "ShareFile Folders";

    protected override async Task OnInitializedAsync()
    {
        _logger.LogDebug("Loading folders from DB...");
        isLoading = true;
        _dbQuery = _db.GetShareFileItems();
        TotalCount = _dbQuery.Count();
        RefreshVM();
        isLoading = false;
    }

    void OnRender(DataGridRenderEventArgs<SfItemVM> args)
    {
        if (args.FirstRender)
        {
            var group = new GroupDescriptor()
            {
                Title = "Folder Path",
                Property = "SemanticPath"
            };
            args.Grid.Groups.Add(group);
            StateHasChanged();
        }
    }

    private void RefreshVM()
    {
        if (_dbQuery != null)
        {
            _logger.LogTrace("Refreshing the view from {0} to {1}...", CurrentPageStartIndex, PageSize);
            VM = _mapper.Map<IEnumerable<SfItemVM>>(_dbQuery.Take(PageSize));
            FilteredCount = VM.Count();
            _logger.LogDebug("{0} of {1} folders loaded", FilteredCount, TotalCount);
        }
    }

    private void RefreshVM(IEnumerable<SfItem>? dbPrincipals = null)
    {
        if (dbPrincipals != null)
        {
            VM = _mapper.Map<IEnumerable<SfItemVM>>(dbPrincipals);
            FilteredCount = VM.Count();
            _logger.LogDebug("{0} folders displayed", FilteredCount);
        }
    }

    public void EnterRefreshView(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            PageSize = GridPageSize;
            RefreshVM();
        }
    }

    private async Task OnPageChanged(LoadDataArgs args)
    {
        _logger.LogTrace("Refreshing the page...");
        isLoading = true;
        if (_dbQuery is IQueryable<SfItem> query)
        {
            await Task.Yield();
            if (!string.IsNullOrEmpty(args.Filter))
                query = query.Where(args.Filter);
            if (!string.IsNullOrEmpty(args.OrderBy))
                query = query.OrderBy(args.OrderBy);
            //FilteredCount = query.Count();
            if (args.Skip != null)
                query = query.Skip(args.Skip.Value);
            if (args.Top != null)
                query = query.Take(args.Top.Value);
            FilteredCount = query.Count();
            VM = _mapper.Map<IEnumerable<SfItemVM>>(query);
        }
        isLoading = false;
        _logger.LogDebug("{0} of {1} folders loaded", FilteredCount, TotalCount);
    }

    public async Task ExportAll()
    {
        isExporting = true;
        await Task.Run(() => DownloadToExcel(), _cts.Token);
        isExporting = false;
    }
    
    public async Task ExportView()
    {
        isExporting = true;
        await Task.Run(() => DownloadToExcel(false), _cts.Token);
        isExporting = false;
    }

    public async Task DownloadToExcel(bool all = true)
    {
        if (_dbQuery != null)
        {
            _logger.LogTrace("Preparing {0} records for export", TotalCount);
            var stopwatch = new Stopwatch();
            stopwatch.Start();
            var query = all ? _dbQuery : _dbQuery.Skip(CurrentPageStartIndex).Take(PageSize);
            //var sfItems = Enumerable.AsEnumerable(query);
            //var items = _mapper.Map<IEnumerable<SfItemVM>>(sfItems);
            _logger.LogTrace("Records prepared in {0}", stopwatch.Elapsed.ToLongTimeString());
            stopwatch.Reset();
            var hide = new int[] { 1,3, 6,7,8,9, 11,12, 16,17,18,19,20,21,22 };
            string fileName = await JS.DownloadExcelStream(query, ExportName, hide);
            _logger.LogDebug("'{0}' downloaded in {1}", fileName, stopwatch.Elapsed.ToLongTimeString());
            stopwatch.Stop();
        }
        else
            _logger.LogTrace("No records to export");
    }

    public void Cancel()
    {
        _logger.LogDebug("Export cancelled");
        _cts?.Cancel();
        _cts = new CancellationTokenSource();
        isExporting = false;
    }

    ////https://docs.microsoft.com/en-us/aspnet/core/blazor/components/data-binding
    //protected IList<SfItemVM>? VmFolders { get; set; }
    //private IEnumerable<SfItem>? _dbSfItems;
    //private bool IsUpdatingFoldersFromApi = false;
    //private CancellationTokenSource cts = new CancellationTokenSource();
    //private int SfDbItemCount;
  //private string FolderToProcess { get; set; } = "allshared"; // folder name or GUID
  //private string FolderToSkip { get; set; } = ""; // folder name or GUID
    //private int FolderRecursionLimit = 3; //-1;
    //[Range(1, int.MaxValue, ErrorMessage = "Value for {0} must be {1} or greater.")]
    //private int PageNumber = 1;
    //[Range(1, int.MaxValue, ErrorMessage = "Value for {0} must be {1} or greater.")]
    //private int PageCount = 100;
    //private int PageSkipCount;
    //private int PageSkipStart => PageSkipCount + 1;
    //private int PageSkipEnd => PageSkipCount + VmFolders?.Count ?? 0;
    
    //protected override async Task OnInitializedAsync()
    //{
    //    _logger.LogDebug("Loading values from DB...");
    //    var dbSfItems = _db.GetShareFileItems();
    //    _dbSfItems = await _db.GetShareFileItemsAsync(dbSfItems, cts.Token);
    //    RefreshVmFolders();
    //}

    //private void RefreshVmFolders(IEnumerable<SfItem>? sfItems = null)
    //{
    //    if (sfItems != null)
    //        _dbSfItems = sfItems;
    //    if (_dbSfItems != null)
    //    {
    //        var sfPageItems = GetPaginatedSfItems();
    //        VmFolders = _mapper.Map<IList<SfItemVM>>(sfPageItems);
    //        _logger.LogDebug("{0} of {1} folders loaded", VmFolders.Count, SfDbItemCount);
    //        //string.Join("\r\n", VmFolders.Select(a => $"{a.FullPath}")));
    //    }
    //}

    //private IEnumerable<SfItem> GetPaginatedSfItems()
    //{
    //    IEnumerable<SfItem>? sfItems = null;
    //    if (_dbSfItems != null)
    //    {
    //        SfDbItemCount = _dbSfItems.Count();
    //        if (PageNumber < 1) PageNumber = 1;
    //        if (PageCount < 1) PageCount = 1;
    //        int pageIndex = PageNumber - 1;
    //        PageSkipCount = pageIndex * PageCount;
    //        if (PageSkipCount >= SfDbItemCount)
    //        {
    //            pageIndex = SfDbItemCount / PageCount;
    //            PageSkipCount = pageIndex * PageCount;
    //            PageNumber = pageIndex + 1;
    //        }
    //        sfItems = _dbSfItems.Skip(PageSkipCount).Take(PageCount);
    //    }
    //    return sfItems ?? Array.Empty<SfItem>();
    //}

    //public async Task EnterGetApiFolders(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //        await GetFoldersFromApi();
    //}

    //public void EnterRefreshView(KeyboardEventArgs e)
    //{
    //    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    //        RefreshVmFolders();
    //}

    //private async Task GetFoldersFromApi()
    //{
    //    _logger.LogDebug("Loading values from API...");
    //    IsUpdatingFoldersFromApi = true;
    //    var stopwatch = new Stopwatch();
    //    stopwatch.Start();
    //    var apiValues = await _sfService.GetShareFileApiFoldersAsync(
    //        FolderToProcess, FolderToSkip, FolderRecursionLimit, cts.Token);
    //    _logger.LogInformation("API values loaded in {0}", stopwatch.Elapsed.ToLongTimeString());
    //    stopwatch.Restart();
    //    _dbSfItems = _mapper.Map<IEnumerable<SfItem>>(apiValues);
    //    RefreshVmFolders();
    //    StateHasChanged(); // update the view before the next await
    //    _logger.LogDebug("Adding values to the database...");
    //    int countUpdated = await _db.AddOverwriteAsync(_dbSfItems);
    //    var folderAccess = apiValues.SelectMany(f => f.AccessControls);
    //    var dbSfAccessControls = _mapper.Map<IEnumerable<SfAccessControl>>(folderAccess);
    //    countUpdated += await _db.AddOverwriteAsync(dbSfAccessControls);
    //    stopwatch.Stop();
    //    _logger.LogInformation("{0} database records updated in {1}", countUpdated, stopwatch.Elapsed.ToLongTimeString());
    //    //var sfAccessControls = _mapper.Map<IEnumerable<SFUserItemSecurity>>(folderAccess);
    //    IsUpdatingFoldersFromApi = false;
    //}
    
    //public async Task ExportToExcel()
    //{
    //    string fileName = "ShareFile Folders";
    //    var hide = new int[] { 6,7,8,9, 11,12, 16,17,18,19,20,21,22 };
    //    await JS.DownloadExcelStream(_dbSfItems, fileName, hide);
    //}

    //public void Cancel()
    //{
    //    _logger.LogDebug("API calls cancelled");
    //    cts?.Cancel();
    //    if (!cts?.TryReset() ?? false)
    //        cts = new CancellationTokenSource();
    //}

    //public void Dispose()
    //{
    //    Cancel();
    //    cts?.Dispose();
    //}
}